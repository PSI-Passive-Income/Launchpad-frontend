/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnerChanged = ContractEventLog<{
  lockId: string;
  oldOwner: string;
  newOwner: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type TokenLocked = ContractEventLog<{
  lockId: string;
  token: string;
  owner: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type TokenUnlocked = ContractEventLog<{
  lockId: string;
  token: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface PSIPadTokenLockFactory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PSIPadTokenLockFactory;
  clone(): PSIPadTokenLockFactory;
  methods: {
    amountToUnlock(
      lockId: number | string | BN
    ): NonPayableTransactionObject<string>;

    changeOwner(
      lockId: number | string | BN,
      newOwner: string
    ): NonPayableTransactionObject<void>;

    fee_aggregator(): NonPayableTransactionObject<string>;

    getUserLocks(user: string): NonPayableTransactionObject<string[]>;

    initialize(
      _fee_aggregator: string,
      _stable_coin: string,
      _stable_coin_fee: number | string | BN
    ): NonPayableTransactionObject<void>;

    lock(
      token: string,
      amount: number | string | BN,
      start_time: number | string | BN,
      duration: number | string | BN,
      releases: number | string | BN
    ): PayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setFeeAggregator(
      _fee_aggregator: string
    ): NonPayableTransactionObject<void>;

    setStableCoin(_stable_coin: string): NonPayableTransactionObject<void>;

    setStableCoinFee(
      _stable_coin_fee: number | string | BN
    ): NonPayableTransactionObject<void>;

    stable_coin(): NonPayableTransactionObject<string>;

    stable_coin_fee(): NonPayableTransactionObject<string>;

    tokensLocked(arg0: number | string | BN): NonPayableTransactionObject<{
      owner: string;
      token: string;
      amount: string;
      start_time: string;
      duration: string;
      releases: string;
      amountUnlocked: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
    }>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unlock(
      lockId: number | string | BN,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    unlockAvailable(
      lockId: number | string | BN
    ): NonPayableTransactionObject<void>;

    unlockedAmount(
      lockId: number | string | BN
    ): NonPayableTransactionObject<string>;

    userTokensLocked(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    OwnerChanged(cb?: Callback<OwnerChanged>): EventEmitter;
    OwnerChanged(
      options?: EventOptions,
      cb?: Callback<OwnerChanged>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    TokenLocked(cb?: Callback<TokenLocked>): EventEmitter;
    TokenLocked(
      options?: EventOptions,
      cb?: Callback<TokenLocked>
    ): EventEmitter;

    TokenUnlocked(cb?: Callback<TokenUnlocked>): EventEmitter;
    TokenUnlocked(
      options?: EventOptions,
      cb?: Callback<TokenUnlocked>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnerChanged", cb: Callback<OwnerChanged>): void;
  once(
    event: "OwnerChanged",
    options: EventOptions,
    cb: Callback<OwnerChanged>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "TokenLocked", cb: Callback<TokenLocked>): void;
  once(
    event: "TokenLocked",
    options: EventOptions,
    cb: Callback<TokenLocked>
  ): void;

  once(event: "TokenUnlocked", cb: Callback<TokenUnlocked>): void;
  once(
    event: "TokenUnlocked",
    options: EventOptions,
    cb: Callback<TokenUnlocked>
  ): void;
}
