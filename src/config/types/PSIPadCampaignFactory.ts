/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CampaignAdded = ContractEventLog<{
  campaign: string;
  token: string;
  owner: string;
  0: string;
  1: string;
  2: string;
}>;
export type CampaignLocked = ContractEventLog<{
  campaign: string;
  token: string;
  collected: string;
  0: string;
  1: string;
  2: string;
}>;
export type CampaignUnlocked = ContractEventLog<{
  campaign: string;
  token: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface PSIPadCampaignFactory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PSIPadCampaignFactory;
  clone(): PSIPadCampaignFactory;
  methods: {
    allowedContracts(arg0: string): NonPayableTransactionObject<boolean>;

    campaigns(arg0: number | string | BN): NonPayableTransactionObject<string>;

    cloneAddress(): NonPayableTransactionObject<string>;

    createCampaign(
      _data: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _token: string,
      _tokenFeePercentage: number | string | BN,
      _factory: string,
      _router: string
    ): NonPayableTransactionObject<string>;

    createCampaignWithOwner(
      _data: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _owner: string,
      _token: string,
      _tokenFeePercentage: number | string | BN,
      _factory: string,
      _router: string
    ): NonPayableTransactionObject<string>;

    default_factory(): NonPayableTransactionObject<string>;

    default_router(): NonPayableTransactionObject<string>;

    fee_aggregator(): NonPayableTransactionObject<string>;

    getUserCampaigns(user: string): NonPayableTransactionObject<string[]>;

    initialize(
      _default_factory: string,
      _default_router: string,
      _fee_aggregator: string,
      _stable_coin: string,
      _stable_coin_fee: number | string | BN,
      _token_fee: number | string | BN,
      _cloneAddress: string
    ): NonPayableTransactionObject<void>;

    lock(campaignId: number | string | BN): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setAllowedContracts(
      _allowedContracts: string[],
      allowed: boolean
    ): NonPayableTransactionObject<void>;

    setCloneAddress(_cloneAddress: string): NonPayableTransactionObject<void>;

    setDefaultFactory(
      _default_factory: string
    ): NonPayableTransactionObject<void>;

    setDefaultRouter(
      _default_router: string
    ): NonPayableTransactionObject<void>;

    setFeeAggregator(
      _fee_aggregator: string
    ): NonPayableTransactionObject<void>;

    setStableCoin(_stable_coin: string): NonPayableTransactionObject<void>;

    setStableCoinFee(
      _stable_coin_fee: number | string | BN
    ): NonPayableTransactionObject<void>;

    setTokenFee(
      _token_fee: number | string | BN
    ): NonPayableTransactionObject<void>;

    stable_coin(): NonPayableTransactionObject<string>;

    stable_coin_fee(): NonPayableTransactionObject<string>;

    token_fee(): NonPayableTransactionObject<string>;

    tokensNeeded(
      _data: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      _tokenFeePercentage: number | string | BN
    ): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unlock(campaignId: number | string | BN): NonPayableTransactionObject<void>;

    userCampaigns(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    CampaignAdded(cb?: Callback<CampaignAdded>): EventEmitter;
    CampaignAdded(
      options?: EventOptions,
      cb?: Callback<CampaignAdded>
    ): EventEmitter;

    CampaignLocked(cb?: Callback<CampaignLocked>): EventEmitter;
    CampaignLocked(
      options?: EventOptions,
      cb?: Callback<CampaignLocked>
    ): EventEmitter;

    CampaignUnlocked(cb?: Callback<CampaignUnlocked>): EventEmitter;
    CampaignUnlocked(
      options?: EventOptions,
      cb?: Callback<CampaignUnlocked>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "CampaignAdded", cb: Callback<CampaignAdded>): void;
  once(
    event: "CampaignAdded",
    options: EventOptions,
    cb: Callback<CampaignAdded>
  ): void;

  once(event: "CampaignLocked", cb: Callback<CampaignLocked>): void;
  once(
    event: "CampaignLocked",
    options: EventOptions,
    cb: Callback<CampaignLocked>
  ): void;

  once(event: "CampaignUnlocked", cb: Callback<CampaignUnlocked>): void;
  once(
    event: "CampaignUnlocked",
    options: EventOptions,
    cb: Callback<CampaignUnlocked>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
